This quiz is shorter than previous ones.

Q1: If a promise triggers a catch() callback, and that callback does not throw an error and does not return a rejected Promise, the catch() is treated as returning a resolved Promise.
Assuming the function returnsAPromise() will either return a promise that resolves with a number, or that rejects with a string, write good code that will use this feature to:
* console.log() any string from the promise
* treat any such error as if it had been resolved with the number 500
* calls handleResult(), passing it the appropriate number
* only have a call to handleResult() appear in your code once.

Q2: I make a webservice call, but my page doesn't change at all.  
Assuming the webservice itself works and that my code is free of syntax errors, list at least 2 different things I can check/do to understand what is happening.  (Be detailed!)

Q3: Consider this code then answer the questions at the end: 
```
let masterNumbers = [4, 8, 15, 16, 23, 42];

function doMaths() {
  let total = 0;
  masterNumbers.forEach( (number) => { 
    total = total + number; // what if masterNumbers gets updated while this is running?
  });
}

fetch('http://numbers.example.com/')
.then( (response) => {
  if( !response.ok ) {
    throw new Error('uh-oh');
  }
  return response.json();
})
.then( (numbers) => {
  masterNumbers = [...numbers, ...masterNumbers];  // Puts numbers at start of array
});

setTimeout( () => {
  doMaths(numbers);
}, 1000);
```
I'm worried that the service call may change the data mid-operation, as noted in the comment.  
Am I right to be worried?  If yes, how can I prevent any problem?  If no, why not?

B1 (extra): A "race condition" is where you have two asynchronous processes, and things work if they resolve in a certain order, and fail if they resolve in the opposite order ("resolve" is being used generically, not to imply a promise).   Show me some code that has such a condition (you can make webservice calls to fictional services if that helps your demonstration).

B2 (extra): Errors that are caught in a catch clause normally cease being errors.  Show me the code for captureError that:

1) Matches the calling conventions implied by the code
2) calls iShouldStop(error) on each error
3) if iShouldStop(error) returns true, the catch() clause should NOT stop the error from being an error (and further then() clauses skipped until the next catch()).  If iShouldStop(error) returns false, the catch() clause should stop the error (and further then() clauses should run)

Hint: Notice where captureError is called - what does it need to return?

// Pretended these functions exist and are written for you:
const iShouldStop = (error) => {...};
const addToKittenComments = (catFacts) => {...};

fetch('http://sophisticated.cats.com/trivia')
.catch( captureError() )
.then( (response) => response.json() )
.catch( captureError() )
.then( addToKittenComments )
.catch( (error) => {
  console.warn(error);
});

